# <hub|node> (default is no grid, just run a RC/webdriver server).
# When launching a node, the parameters will be forwarded to the server on the
# node, so you can use something like -role node -trustAllSSLCertificates. In
# that case, the SeleniumServer will be launch with the trustallSSLCertificates
# option.
# For backwards compatibility "wd" and "rc" roles are still a valid subset of
# the "node" role. But those roles limit the types of remote connections to
# their corresponding API, while "node" allows both RC and WebDriver remote
# connections.
#ROLE=

# (hub & node)  <IP | hostname>
# Usually not needed and determined automatically. For exotic network
# configuration, network with VPN, specifying the host might be necessary.
#HOST=

# (hub & node)
# The port the remote/hub will listen on. Default to 4444.
#PORT=4444

# (hub & node) <com.mycompany.MyServlet,com.mycompany.MyServlet2>
# To register a new servlet on the hub/node. The servlet will accessible under
# the path /grid/admin/MyServlet /grid/admin/MyServlet2.
#SERVLETS=

# (hub)
# A YAML file following grid1 format.
#GRID_1_YML=/foo/grid1.yml

# (hub)
# A JSON file following grid2 format.
#HUB_CONFIG=/foo/bar.json

# (node) <XXXX>
# The timeout in seconds before the hub automatically ends a test that hasn't
# had any activity than XX sec. The browser will be released for another test to
# use. This typically takes care of the client crashes.
#NODE_TIMEOUT=

# (hub) <true | false> default to true.
# If true, the hub will reject test requests right away if no proxy is currently
# registered that can host that capability.
# Set it to false to have the request queued until a node supporting the
# capability is added to the grid.
#THROW_ON_CAPABILITY_NOT_PRESENT=true

# (hub)
# A class implementing the CapabilityMatcher interface. Defaults to
# org.openqa.grid.internal.utils.DefaultCapabilityMatcher. Specify the logic the
# hub will follow to define if a request can be assigned to a node. Change this
# class if you want to have the matching process use regular expression instead
# of exact match for the version of the browser for instance. All the nodes of a
# grid instance wil use the same matcher, defined by the registry.
#CAPABILITY_MATCHER="org.openqa.grid.internal.utils.DefaultCapabilityMatcher"

# (hub)
# A class implementing the Prioritizer interface. Default to null (no priority =
# FIFO). Specify a custom prioritizer if you need the grid to process the tests
# from the CI, or the IE tests first for instance.
#PRIORITIZER=


# (node) <http://localhost:4444/grid/register>
# The url that will be used to post the registration request.
#HUB="http://localhost:4444/grid/register"

# (node)
# Max number of tests that can run at the same time on the node, independently
# of the browser used.
#MAX_SESSION= 

# (node)
# How often in ms the node will try to register itself again. Allow to restart
# the hub without having to restart the nodes.
#REGISTER_CYCLE

# (hub) <XXXX>. Default to no timeout (-1)
# The time in ms after which a new test waiting for a node to become available
# will time out. When that happens, the test will throw an exception before
# starting a browser.
#NEW_SESSION_WAIT_TIMEOUT=-1

# (node)
# How often the hub checks if the node is still alive.
#NODE_POLLING=???

# (node) in ms.
# If the node remains down for more than unregisterIfStillDownAfter millisec, it
# will disappear from the hub. Default is 1 min. 
#UNREGISTER_IF_STILL_DOWN_AFTER=60000

# (node) <XXXX> in ms.
# How often a proxy will check for timed out thread.
#CLEANUP_CYCLE=???

# (node)
# The class that will be used to represent the node. By default
# org.openqa.grid.selenium.proxy.SeleniumRemoteProxy (selenium1 / RC)
# org.openqa.grid.selenium.proxy.WebDriverRemoteProxy (selenium2 / webdriver)
#PROXY=""
